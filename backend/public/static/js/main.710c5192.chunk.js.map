{"version":3,"sources":["config.js","components/LoggedInContext.js","components/ProtectedRoute.js","components/Signup.js","crud.js","components/Login.js","components/ForgotPassword.js","components/Home.js","components/EditUserModal.js","components/UserCard.js","components/EditUsers.js","components/MainRouter.js","App.js","serviceWorker.js","index.js"],"names":["uriBase","LoggedInContext","React","createContext","LoggedInProvider","props","useState","users","setUsers","loggedIn","setLoggedIn","token","setToken","Provider","value","checkUser","userName","password","rtnValue","console","log","fetch","method","headers","body","JSON","stringify","then","httpResponse","ok","Error","json","response","hasOwnProperty","authenticated","catch","error","message","children","LoggedInConsumer","Consumer","ProtectedRoute","Component","component","rest","render","to","Signup","setUserName","setPassword","useContext","Form","Group","controlId","Label","Control","type","placeholder","onChange","event","preventDefault","target","Text","className","Button","variant","onClick","endpoint","doc","err","createOne","Login","username","ForgotPassword","Home","map","user","key","_id","EditUserModal","show","setShow","handleClose","Fragment","Modal","onHide","Header","closeButton","Title","Body","Footer","refresh","UserCard","Card","style","width","Img","src","result","EditUsers","allUsers","useEffect","MainRouter","path","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQACMA,EAGE,uCCDFC,EAAkBC,IAAMC,gBAExBC,EAAmB,SAACC,GAAW,IAAD,EAERH,IAAMI,SAAS,IAFP,mBAE3BC,EAF2B,KAEpBC,EAFoB,OAGFN,IAAMI,UAAS,GAHb,mBAG3BG,EAH2B,KAGjBC,EAHiB,OAIRR,IAAMI,SAAS,IAJP,mBAI3BK,EAJ2B,KAIpBC,EAJoB,KAmDhC,OACA,kBAACX,EAAgBY,SAAjB,CAA0BC,MAAQ,CAAEP,QAAOC,WAAUC,WAAUM,UA7C7C,SAACC,EAAUC,GAEzB,IAAIC,GAAW,EAsCf,OApCAC,QAAQC,IAAIJ,GACZK,MAAM,GAAD,OAAKrB,EAAL,YDTE,SCSF,UACL,CACIsB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEV,WAAUC,eAEpCU,MAAK,SAAAC,GAEF,IAAKA,EAAaC,GACd,MAAM,IAAIC,MAAM,eAIpB,OAAOF,EAAaG,UAEvBJ,MAAK,SAAAK,GAEFb,QAAQC,IAAIY,GACRA,EAASC,eAAe,mBAEpBvB,EAAYsB,EAASE,gBAEU,IAA3BF,EAASE,eACTtB,EAASoB,EAASrB,OAEtBO,EAAWc,EAASE,kBAI/BC,OAAM,SAAAC,GACHjB,QAAQC,IAAIgB,EAAMC,YAGfnB,GAK+DP,UACpEN,EAAMiC,WAKVC,EAAmBtC,EAAgBuC,S,QCxC1BC,EAnBQ,SAAC,GAAyC,IAA3BC,EAA0B,EAArCC,UAAyBC,EAAY,6BAE5D,OAEI,kBAACL,EAAD,MAEQ,gBAAG9B,EAAH,EAAGA,SAAH,OACQ,kBAAC,IAAD,eACIoC,OAAQ,SAAAxC,GAAK,OACTI,EAAW,kBAACiC,EAAcrC,GAAY,kBAAC,IAAD,CAAUyC,GAAG,QAEnDF,Q,eC8DjBG,EArEA,SAAC1C,GAAW,IAAD,EAEQH,IAAMI,SAAS,IAFvB,mBAEjBU,EAFiB,KAEPgC,EAFO,OAGQ9C,IAAMI,SAAS,IAHvB,mBAGjBW,EAHiB,KAGPgC,EAHO,KAKjBtC,EAASuC,qBAAWjD,GAApBU,MA2BL,OACI,6BACI,kBAACwC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAClB,kBAACF,EAAA,EAAKG,MAAN,kBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,WAAWC,SA9BjC,SAACC,GAE7BA,EAAMC,iBACNZ,EAAYW,EAAME,OAAO/C,QA2ByEA,MAAOE,IAC7F,kBAACmC,EAAA,EAAKW,KAAN,CAAWC,UAAU,gBAKzB,kBAACZ,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAClB,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,WAAWC,YAAY,WAAWC,SAhCrC,SAACC,GAE7BA,EAAMC,iBACNX,EAAYU,EAAME,OAAO/C,QA6B6EA,MAAOG,KAErG,kBAAC+C,EAAA,EAAD,CAAQC,QAAQ,UAAUT,KAAK,SAASU,QA5BvB,SAACP,GAC1BA,EAAMC,iBAEN,KC1BU,SAACO,EAAUxD,EAAOyD,GAEhCjD,QAAQC,IAAIgD,GACL/C,MAAM8C,EAAU,CACnB7C,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BZ,IAE/Ba,KAAMC,KAAKC,UAAU0C,KAEpBzC,MAAK,SAAAC,GACF,IAAKA,EAAaC,GACd,MAAM,IAAIC,MAAJ,6BAAiCqC,IAG3C,OAAOvC,EAAaG,UAEvBI,OAAM,SAAAkC,GACH,MAAMA,KDQNC,CAAU,GAAD,OAAMtE,EAAN,YHvBN,SGuBM,UAAoCW,EAAO,CAAEK,WAAUC,aAChEE,QAAQC,IAAI,SAEhB,MAAOiD,GACHlD,QAAQC,IAAIiD,EAAIhC,YAoBZ,WAIJ,6BACA,kBAAC,IAAD,CAAMS,GAAG,KAAT,QACA,kBAACP,EAAD,MAEI,SAAAzB,GAAK,OAEDA,EAAML,SACF,yCAEA,kDEKT8D,EAnED,SAAClE,GAAW,IAAD,EAESH,IAAMI,SAAS,IAFxB,mBAEhBkE,EAFgB,KAENxB,EAFM,OAGS9C,IAAMI,SAAS,IAHxB,mBAGhBW,EAHgB,KAGNgC,EAHM,KAMflC,EAAcb,IAAMgD,WAAWjD,GAA/Bc,UAwBN,OACI,6BACI,kBAACoC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,gBAClB,kBAACF,EAAA,EAAKG,MAAN,kBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,WAAWC,SA3BjC,SAACC,GAE7BA,EAAMC,iBACNZ,EAAYW,EAAME,OAAO/C,QAwBuEA,MAAO0D,IAC3F,kBAACrB,EAAA,EAAKW,KAAN,CAAWC,UAAU,gBAKzB,kBAACZ,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAClB,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,WAAWC,YAAY,WAAWC,SA7BrC,SAACC,GAE7BA,EAAMC,iBACNX,EAAYU,EAAME,OAAO/C,QA0B2EA,MAAOG,KAEnG,kBAAC+C,EAAA,EAAD,CAAQC,QAAQ,UAAUT,KAAK,SAASU,QAzBvB,SAACP,GAC1BA,EAAMC,iBAGN7C,EAAUyD,EAAUvD,KAqBZ,WAIJ,6BACA,kBAAC,IAAD,CAAM6B,GAAG,KAAT,QACA,kBAACP,EAAD,MAEI,SAAAzB,GAAK,OAEDA,EAAML,SACF,yCAEA,kDCQTgE,EAhEQ,SAACpE,GAAW,IAAD,EAEAH,IAAMI,SAAS,IAFf,mBAEzBU,EAFyB,KAEfgC,EAFe,OAGA9C,IAAMI,SAAS,IAHf,mBAGzBW,EAHyB,KAGfgC,EAHe,KA6B9B,OACI,6BACI,kBAACE,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBAClB,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,WAAWC,SA7BjC,SAACC,GAE7BA,EAAMC,iBACNZ,EAAYW,EAAME,OAAO/C,QA0BuEA,MAAOE,KAG/F,kBAACmC,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBAClB,kBAACF,EAAA,EAAKG,MAAN,sBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,WAAWC,YAAY,eAAeC,SA5BzC,SAACC,GAE7BA,EAAMC,iBACNX,EAAYU,EAAME,OAAO/C,QAyB+EA,MAAOG,KAEvG,kBAAC+C,EAAA,EAAD,CAAQC,QAAQ,UAAUT,KAAK,SAASU,QAxBvB,SAACP,GAC1BA,EAAMC,iBAEN,IF6BUO,EE5BG,GAAD,OAAKnE,EAAL,YNrBL,SMqBK,kBAAoCgB,GF4B5BoD,EE5ByC,CAAEnD,YF8B5DI,MAAM8C,EAAU,CACnB7C,OAAQ,QACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU0C,KAExBzC,MAAK,SAAAC,GAEF,IAAKA,EAAaC,GACd,MAAM,IAAIC,MAAJ,8BAAkCqC,IAG5C,OAAOvC,EAAaG,UAEvBI,OAAM,SAAAkC,GACH,MAAMA,KE7CFlD,QAAQC,IAAI,WAEhB,MAAOiD,GACHlD,QAAQC,IAAIiD,EAAIhC,SFwBX,IAAC8B,EAAUC,IERZ,WAKJ,6BACA,kBAAC,IAAD,CAAMtB,GAAG,KAAT,QACA,kBAACP,EAAD,MAEI,SAAAzB,GAAK,OAEDA,EAAML,SACF,yCAEA,kDCzBTiE,MAlCf,SAAcrE,GAAQ,IAAD,EAESH,IAAMgD,WAAWjD,GAArCM,EAFW,EAEXA,MAAOE,EAFI,EAEJA,SAWb,OACI,6BAEQF,EAAMoE,KAAI,SAAAC,GACN,OAAO,wBAAIC,IAAKD,EAAKE,KAAMF,EAAKJ,aAGxC,6BACA,kBAAC,IAAD,CAAM1B,GAAG,WAAT,WACA,6BACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,6BACA,kBAAC,IAAD,CAAMA,GAAG,mBAAT,mBACA,6BACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,cArBArC,EACQ,yCAEA,+C,gBCmELsE,EAzEO,SAAC1E,GAAW,IAAD,EAELC,oBAAS,GAFJ,mBAEtB0E,EAFsB,KAEhBC,EAFgB,OAGG3E,mBAASD,EAAMuE,KAAK5D,UAHvB,mBAGtBA,EAHsB,KAGZgC,EAHY,OAIG1C,mBAASD,EAAMuE,KAAK3D,UAJvB,mBAItBA,EAJsB,KAIZgC,EAJY,KAMvBiC,EAAc,kBAAMD,GAAQ,IA+BlC,OACI,kBAAC,IAAME,SAAP,KAEI,kBAACnB,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAjCf,kBAAMe,GAAQ,KAiCzB,QAEA,kBAACG,EAAA,EAAD,CAAOJ,KAAOA,EAAOK,OAASH,GAC1B,kBAACE,EAAA,EAAME,OAAP,CAAcC,aAAW,GACrB,kBAACH,EAAA,EAAMI,MAAP,kBAAyBxE,EAAzB,MAEJ,kBAACoE,EAAA,EAAMK,KAAP,KACI,kBAACtC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,yBAClB,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,WAAWC,SAzCzC,SAACC,GAE7BA,EAAMC,iBACNZ,EAAYW,EAAME,OAAO/C,QAsC+EA,MAAOE,KAG/F,kBAACmC,EAAA,EAAKC,MAAN,CAAYC,UAAU,yBAClB,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,WAAWC,YAAY,WAAWC,SAxC7C,SAACC,GAE7BA,EAAMC,iBACNX,EAAYU,EAAME,OAAO/C,QAqCmFA,MAAOG,OAI3G,kBAACmE,EAAA,EAAMM,OAAP,KACI,kBAAC1B,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAUgB,GAAtC,UAGA,kBAAClB,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QA1Cf,SAACP,GAExBA,EAAMC,iBAEN,IJkDWO,EIjDG,GAAD,OAAKnE,EAAL,YRzBN,SQyBM,kBAAoCK,EAAMuE,KAAK5D,UJiDvCoD,EIjDoD,CAAEpD,WAAUC,YJmDlFI,MAAM8C,EAAU,CACnB7C,OAAQ,MACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU0C,KAExBzC,MAAK,SAAAC,GAEF,IAAKA,EAAaC,GACd,MAAM,IAAIC,MAAJ,6BAAiCqC,IAG3C,OAAOvC,EAAaG,UAEvBI,OAAM,SAAAkC,GACH,MAAMA,KIlEFlD,QAAQC,IAAI,WAGhB,MAAOiD,GACHlD,QAAQC,IAAIiD,EAAIhC,SJ4CV,IAAC8B,EAAUC,EIzCzBa,GAAQ,GACR5E,EAAMsF,YA4BU,oBC7BLC,EAlCE,SAACvF,GAgBd,OACI,6BACI,kBAACwF,EAAA,EAAD,CAAMC,MAAQ,CAAEC,MAAO,UACnB,kBAACF,EAAA,EAAKG,IAAN,CAAU/B,QAAQ,MAAMgC,IAAI,uBAC5B,kBAACJ,EAAA,EAAKJ,KAAN,KACI,kBAACI,EAAA,EAAKL,MAAN,KAAcnF,EAAMuE,KAAK5D,UACzB,kBAAC6E,EAAA,EAAK/B,KAAN,uBAIA,kBAAC,EAAD,CAAec,KAAOvE,EAAMuE,KAAOe,QAAUtF,EAAMsF,UACnD,kBAAC3B,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAzBb,SAACP,GLgGhB,IAACQ,KK9FF,UAAMnE,EAAN,YTHF,SSGE,kBAAoCK,EAAMuE,KAAK5D,UAAYX,EAAMuE,KLgGvEvD,MAAM8C,EAAU,CACnB7C,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAGnBI,MAAK,SAAAC,GAEF,IAAKA,EAAaC,GACd,MAAM,IAAIC,MAAJ,+BAAmCqC,IAG7C,OAAOvC,EAAaG,UAGvBI,OAAM,SAAAkC,GACH,MAAMA,MK/GT1C,MAAK,SAAAuE,GACF7F,EAAMsF,aAETxD,OAAM,SAAAkC,GACHlD,QAAQC,IAAIiD,EAAIhC,cAkBR,cCEL8D,EA/BG,SAAC9F,GAAW,IAAD,EAEGC,mBAAU,IAFb,mBAEjBC,EAFiB,KAEVC,EAFU,KAInBmF,EAAU,WNmBL,IAACxB,KMjBD,GAAD,OAAKnE,EAAL,YVHC,SUGD,UNmBHqB,MAAM8C,EAAU,CACnB7C,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAGnBI,MAAK,SAAAC,GAEF,IAAKA,EAAaC,GACd,MAAM,IAAIC,MAAJ,4BAAgCqC,IAG1C,OAAOvC,EAAaG,UAGvBI,OAAM,SAAAkC,GACH,MAAMA,MMlCT1C,MAAK,SAAAyE,GACF5F,EAAS4F,MAEZjE,OAAM,SAAAkC,GACHlD,QAAQC,IAAIiD,OAQpB,OAJAgC,qBAAW,WACPV,MACF,IAGE,6BACI,qCAEIpF,EAAMoE,KAAK,SAAAC,GACX,OAAO,kBAAC,EAAD,CAAUC,IAAMD,EAAKE,IAAMF,KAAOA,EAAOe,QAAUA,SClB3D,SAASW,IAEpB,OACI,kBAAC,EAAD,KACA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,UAAU5D,UAAYI,IAClC,kBAAC,IAAD,CAAOwD,KAAK,SAAS5D,UAAY4B,IACjC,kBAAC,IAAD,CAAOgC,KAAK,kBAAkB5D,UAAY8B,IAC1C,kBAAC,EAAD,CAAgB8B,KAAK,SAAS5D,UAAYwD,IAE1C,kBAAC,IAAD,CAAOI,KAAK,IAAI5D,UAAY+B,OCT7B8B,MATf,WAEE,OACE,yBAAKzC,UAAU,OACb,kBAACuC,EAAD,QCIcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASjE,OACP,kBAAC,IAAMkE,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzF,MAAK,SAAA0F,GACJA,EAAaC,gBAEdnF,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.710c5192.chunk.js","sourcesContent":["// Configuring the api endpoints\r\nconst uriBase = (process.env.NODE_ENV !== 'production' ? (\r\n    'http://localhost:3000'\r\n    ) : (\r\n        'https://helio-demo-one.herokuapp.com'\r\n    )\r\n)\r\n\r\nconst apiVer = 'api/v1'\r\n\r\nexport { uriBase, apiVer }\r\n","import React from 'react'\r\nimport { uriBase, apiVer} from '../config'\r\n\r\nconst LoggedInContext = React.createContext()\r\n\r\nconst LoggedInProvider = (props) => {\r\n\r\n    let [users, setUsers] = React.useState([])\r\n    let [loggedIn, setLoggedIn] = React.useState(false)\r\n    let [token, setToken] = React.useState('')\r\n\r\n    //Function to check user\r\n    const checkUser = (userName, password) => {\r\n\r\n        let rtnValue = false\r\n        // If username and password match, return true\r\n        console.log(userName)\r\n        fetch(`${ uriBase }/${ apiVer }/login`, \r\n        {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ userName, password })\r\n        })\r\n        .then(httpResponse => {\r\n\r\n            if (!httpResponse.ok) {\r\n                throw new Error('Login Error')\r\n            }\r\n\r\n            // Convert json from endpoint into a js object\r\n            return httpResponse.json()\r\n        })\r\n        .then(response => {\r\n            \r\n            console.log(response)\r\n            if (response.hasOwnProperty('authenticated')) {\r\n\r\n                    setLoggedIn(response.authenticated)\r\n\r\n                    if (response.authenticated === true) {\r\n                        setToken(response.token)\r\n                    }\r\n                    rtnValue = response.authenticated\r\n\r\n                }\r\n        })\r\n        .catch(error => {\r\n            console.log(error.message)\r\n        })\r\n\r\n        return rtnValue\r\n        \r\n    }\r\n\r\n    return (\r\n    <LoggedInContext.Provider value={ { users, setUsers, loggedIn, checkUser, token } }>\r\n        { props.children }\r\n    </LoggedInContext.Provider>\r\n    )\r\n}\r\n\r\nconst LoggedInConsumer = LoggedInContext.Consumer\r\nexport { LoggedInContext, LoggedInProvider, LoggedInConsumer }","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { LoggedInConsumer } from './LoggedInContext'\r\n\r\nconst ProtectedRoute = ( { component: Component, ...rest } ) => {\r\n\r\n    return (\r\n\r\n        <LoggedInConsumer>\r\n            {\r\n                ({ loggedIn }) => (\r\n                        <Route\r\n                            render={props =>\r\n                                loggedIn ? <Component {...props} /> : <Redirect to='/' />\r\n                            }\r\n                            {...rest}\r\n                        />\r\n                )\r\n            }\r\n        </LoggedInConsumer>\r\n    )\r\n}\r\n\r\nexport default ProtectedRoute","import React, { useContext } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport { LoggedInConsumer, LoggedInContext } from './LoggedInContext';\r\nimport { uriBase, apiVer } from '../config';\r\nimport { createOne } from '../crud'\r\n\r\nconst Signup = (props) => {\r\n\r\n    let [userName, setUserName] = React.useState('')\r\n    let [password, setPassword] = React.useState('')\r\n\r\n    let {token} = useContext(LoggedInContext)\r\n\r\n    const userNameOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setUserName(event.target.value)\r\n    }\r\n\r\n    const passwordOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const submitOnClickHandler = (event) => {\r\n        event.preventDefault()\r\n\r\n        try {\r\n            createOne( `${ uriBase }/${ apiVer }/users`, token, { userName, password } )\r\n            console.log('added')\r\n        }\r\n        catch (err) {\r\n            console.log(err.message)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form>\r\n                <Form.Group controlId=\"SignupUserame\">\r\n                    <Form.Label>User Name</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Username\" onChange={ userNameOnChangeHandler } value={userName} />\r\n                    <Form.Text className=\"text-muted\">\r\n\r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"SignupPassword\">\r\n                    <Form.Label>New Password</Form.Label>\r\n                    <Form.Control type=\"password\" placeholder=\"Password\" onChange={ passwordOnChangeHandler } value={password} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={ submitOnClickHandler }>\r\n                    Submit\r\n  </Button>\r\n            </Form>\r\n            <br></br>\r\n            <Link to='/'>Home</Link>\r\n            <LoggedInConsumer>\r\n            {\r\n                value => (\r\n\r\n                    value.loggedIn ? (\r\n                        <h3>Logged In</h3>\r\n                    ) : (\r\n                        <h3>Not Logged In</h3>\r\n                    )\r\n                )\r\n            }\r\n             </LoggedInConsumer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Signup;","// This storage file handles the api calls to our backend\r\n// Functions require an api endpoint and document/data\r\n\r\n//Create a record\r\nconst createOne = (endpoint, token, doc) => {\r\n\r\n    console.log(doc)\r\n    return fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': \"application/json\",\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(doc)\r\n    })\r\n        .then(httpResponse => {\r\n            if (!httpResponse.ok) {\r\n                throw new Error(`Error with POST at ${ endpoint }`)\r\n            }\r\n\r\n            return httpResponse.json()\r\n        })\r\n        .catch(err => {\r\n            throw err\r\n        })\r\n}\r\n\r\n// Get all\r\nconst getAll = (endpoint) => {\r\n\r\n    return fetch(endpoint, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n        .then(httpResponse => {\r\n\r\n            if (!httpResponse.ok) {\r\n                throw new Error(`Error with GET at ${ endpoint }`)\r\n            }\r\n\r\n            return httpResponse.json()\r\n\r\n        })\r\n        .catch(err => {\r\n            throw err\r\n        })\r\n\r\n}\r\n\r\n// Get one\r\nconst getOne = () => {\r\n\r\n}\r\n\r\n// Patch One\r\nconst patchOne = (endpoint, doc) => {\r\n\r\n    return fetch(endpoint, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'apllication/json'\r\n        },\r\n        body: JSON.stringify(doc)\r\n    })\r\n    .then(httpResponse => {\r\n\r\n        if( !httpResponse.ok ) {\r\n            throw new Error(`Error with PATCH at ${ endpoint }`)\r\n        }\r\n\r\n        return httpResponse.json()\r\n    })\r\n    .catch(err => {\r\n        throw err\r\n    })\r\n}\r\n\r\n\r\n\r\n// Update one\r\nconst updateOne = (endpoint, doc) => {\r\n\r\n    return fetch(endpoint, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'apllication/json'\r\n        },\r\n        body: JSON.stringify(doc)\r\n    })\r\n    .then(httpResponse => {\r\n\r\n        if( !httpResponse.ok ) {\r\n            throw new Error(`Error with POST at ${ endpoint }`)\r\n        }\r\n\r\n        return httpResponse.json()\r\n    })\r\n    .catch(err => {\r\n        throw err\r\n    })\r\n}\r\n\r\n// Delete one\r\nconst deleteOne = (endpoint) => {\r\n\r\n    return fetch(endpoint, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n        .then(httpResponse => {\r\n\r\n            if (!httpResponse.ok) {\r\n                throw new Error(`Error with DELETE at ${ endpoint }`)\r\n            }\r\n\r\n            return httpResponse.json()\r\n\r\n        })\r\n        .catch(err => {\r\n            throw err\r\n        })\r\n\r\n}\r\n\r\nexport { createOne, getAll, getOne, patchOne, updateOne, deleteOne }","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport { LoggedInConsumer, LoggedInContext } from './LoggedInContext'\r\n\r\nconst Login = (props) => {\r\n\r\n    let [username, setUserName] = React.useState('')\r\n    let [password, setPassword] = React.useState('')\r\n\r\n    // Context\r\n    let { checkUser } = React.useContext(LoggedInContext)\r\n\r\n    const userNameOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setUserName(event.target.value)\r\n    }\r\n\r\n    const passwordOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const submitOnClickHandler = (event) => {\r\n        event.preventDefault()\r\n        \r\n        //Check to see if user exists\r\n        checkUser(username, password)\r\n        //If exists check password\r\n        \r\n        // Display result\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form>\r\n                <Form.Group controlId=\"loginUserame\">\r\n                    <Form.Label>User Name</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Username\" onChange={userNameOnChangeHandler} value={username}/>\r\n                    <Form.Text className=\"text-muted\">\r\n\r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"loginPassword\">\r\n                    <Form.Label>New Password</Form.Label>\r\n                    <Form.Control type=\"password\" placeholder=\"Password\" onChange={passwordOnChangeHandler} value={password}/>\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={submitOnClickHandler}>\r\n                    Submit\r\n            </Button>\r\n            </Form>\r\n            <br></br>\r\n            <Link to='/'>Home</Link>\r\n            <LoggedInConsumer>\r\n            {\r\n                value => (\r\n\r\n                    value.loggedIn ? (\r\n                        <h3>Logged In</h3>\r\n                    ) : (\r\n                        <h3>Not Logged In</h3>\r\n                    )\r\n                )\r\n            }\r\n             </LoggedInConsumer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { LoggedInConsumer } from './LoggedInContext'\r\nimport { uriBase, apiVer } from '../config'\r\nimport { patchOne } from '../crud'\r\n\r\nconst ForgotPassword = (props) => {\r\n\r\n    let [userName, setUserName] = React.useState(\"\")\r\n    let [password, setPassword] = React.useState(\"\")\r\n\r\n    const usernameOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setUserName(event.target.value)\r\n    }\r\n\r\n    const passwordOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const submitOnClickHandler = (event) => {\r\n        event.preventDefault()\r\n\r\n        try {\r\n            patchOne(`${ uriBase }/${ apiVer }/users/${ userName }`, { password })\r\n            console.log('patched')\r\n        }\r\n        catch (err) {\r\n            console.log(err.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form>\r\n                <Form.Group controlId=\"forgotPassUserName\">\r\n                    <Form.Label>Username</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Username\" onChange={usernameOnChangeHandler} value={userName} />\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"forgotPassPassword\">\r\n                    <Form.Label> New Password</Form.Label>\r\n                    <Form.Control type=\"password\" placeholder=\"New Password\" onChange={passwordOnChangeHandler} value={password} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={submitOnClickHandler}>\r\n                    Submit\r\n        </Button>\r\n\r\n            </Form>\r\n            <br></br>\r\n            <Link to='/'>Home</Link>\r\n            <LoggedInConsumer>\r\n            {\r\n                value => (\r\n\r\n                    value.loggedIn ? (\r\n                        <h3>Logged In</h3>\r\n                    ) : (\r\n                        <h3>Not Logged In</h3>\r\n                    )\r\n                )\r\n            }\r\n             </LoggedInConsumer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPassword;","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { LoggedInContext } from './LoggedInContext'\r\n\r\nfunction Home(props) {\r\n\r\n    let { users, loggedIn } = React.useContext(LoggedInContext)\r\n\r\n    const isLoggedIn = () => {\r\n\r\n        if (loggedIn) {\r\n            return (<h3>Logged In</h3>)\r\n        } else {\r\n            return (<h3>Not Logged In</h3>)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                users.map(user => {\r\n                    return <li key={user._id}>{user.username}</li>\r\n                })\r\n            }\r\n            <br></br>\r\n            <Link to=\"/signup\">Sign Up</Link>\r\n            <br></br>\r\n            <Link to=\"/login\">Login</Link>\r\n            <br></br>\r\n            <Link to=\"/forgotpassword\">Forgot Password</Link>\r\n            <br></br>\r\n            <Link to=\"/admin\">Edit Users</Link>\r\n            {isLoggedIn()}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport { updateOne } from '../crud'\r\nimport { uriBase, apiVer } from '../config'\r\n\r\nconst EditUserModal = (props) => {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [userName, setUserName] = useState(props.user.userName)\r\n    const [password, setPassword] = useState(props.user.password)\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const userNameOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setUserName(event.target.value)\r\n    }\r\n\r\n    const passwordOnChangeHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const saveOnClickHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n\r\n        try {\r\n            updateOne(`${ uriBase }/${ apiVer }/users/${ props.user.userName }`, { userName, password })\r\n            console.log('updated')\r\n\r\n        }\r\n        catch (err) {\r\n            console.log(err.message)\r\n        }\r\n\r\n    setShow(false)\r\n    props.refresh()\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Button variant=\"primary\" onClick={ handleShow }>Edit</Button>\r\n\r\n            <Modal show={ show } onHide={ handleClose }>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>`Editing ${ userName }`</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group controlId=\"editUserModalUserName\">\r\n                            <Form.Label>Username</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Username\" onChange={userNameOnChangeHandler} value={userName} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"editUserModalPassword\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" onChange={passwordOnChangeHandler} value={password} />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={ handleClose }>\r\n                        Cancel\r\n                </Button>\r\n                    <Button variant=\"primary\" onClick={ saveOnClickHandler }>\r\n                        Save Changes\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    );\r\n\r\n};\r\n\r\nexport default EditUserModal;","import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { deleteOne } from '../crud'\r\nimport { uriBase, apiVer } from '../config'\r\nimport EditUserModal from './EditUserModal'\r\n\r\nconst UserCard = (props) => {\r\n\r\n    const deleteOnCLickHandler = (event) => {\r\n\r\n        deleteOne (`${ uriBase }/${ apiVer }/users/${props.user.userName}`, props.user)\r\n        .then(result => {\r\n            props.refresh()   \r\n        })\r\n        .catch(err => {\r\n            console.log(err.message)\r\n        })\r\n\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Card style={ { width: '18rem' } }>\r\n                <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\r\n                <Card.Body>\r\n                    <Card.Title>{ props.user.userName }</Card.Title>\r\n                    <Card.Text>\r\n                        Some card text\r\n\r\n                    </Card.Text>\r\n                    <EditUserModal user={ props.user } refresh={ props.refresh }></EditUserModal>\r\n                    <Button variant=\"primary\" onClick={ deleteOnCLickHandler }>Delete</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getAll } from '../crud';\r\nimport { uriBase, apiVer } from '../config';\r\nimport UserCard from './UserCard'\r\n\r\nconst EditUsers = (props) => {\r\n\r\n    const [ users, setUsers ] = useState( [] ) \r\n    \r\n    const refresh = () => {\r\n\r\n        getAll(`${ uriBase }/${ apiVer }/users`)\r\n        .then(allUsers => {\r\n            setUsers(allUsers)\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    useEffect( () => {\r\n        refresh()\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Users</h2>\r\n            {\r\n                users.map( user => {\r\n                return <UserCard key={ user._id } user={ user } refresh={ refresh }></UserCard>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditUsers;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { LoggedInProvider } from './LoggedInContext'\r\nimport ProtectedRoute from './ProtectedRoute'\r\n\r\nimport Signup from './Signup';\r\nimport Login from './Login';\r\nimport ForgotPassword from './ForgotPassword';\r\nimport Home from './Home';\r\nimport EditUsers from './EditUsers'\r\n\r\nexport default function MainRouter() {\r\n\r\n    return (\r\n        <LoggedInProvider>\r\n        <Router>\r\n            <Switch>\r\n                <Route path='/signup' component={ Signup }></Route>\r\n                <Route path='/Login' component={ Login }></Route>\r\n                <Route path='/ForgotPassword' component={ ForgotPassword }></Route>\r\n                <ProtectedRoute path='/admin' component={ EditUsers }></ProtectedRoute>\r\n\r\n                <Route path='/' component={ Home }></Route>\r\n            </Switch>\r\n        </Router>\r\n        </LoggedInProvider>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport MainRouter from './components/MainRouter'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <MainRouter></MainRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}